#include<iostream>
#include<vector>
#include<queue>
using namespace std;
class solution
{
    public:
    bool checkForCycle(int s, int V, vector<int> adj[], vector<int>& vis)
    {
        vector<int> parent(V,-1);
        queue<pair<int,int>> q;
        
        vis[0]=true;
        q.push({s,-1});
        
        while(!q.empty())
        {
            int node=q.front().first;
            int par=q.front().second;
            q.pop();
            
            for(auto it:adj[node])
            {
                if(!vis[it])
                {
                    vis[it]=true;
                    q.push({it,node});
                }
                else if(par!=it)
                {
                    return true;
                }
            }
        }return false;
    }
    
    public:
    bool isCycle(int V, vector<int> adj[])
    {
        vector<int> vis(V,0);
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
            if(checkForCycle(i,V,adj,vis));
            return true;
            }
        }return false;
    }
};

int main()
{
    int tc;
    cin>>tc;
    while(tc--)
    {
        int V,E;
        cin>>V>>E;
        int u,v;
        vector<int> adj[V];
        for(int i=0;i<E;i++)
        {
            cin>>u>>v;
            adj[u].push_back(v);
            adj[v].push_back(u);
            
        }
        solution obj;
        bool ans=obj.isCycle(V,adj);
        if(ans)
        {
            cout << "1\n";
		
        }else cout << "0\n";
    }
    return 0;
}
