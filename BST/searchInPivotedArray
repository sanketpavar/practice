class Solution {
public:
    int search(vector<int>& nums, int target) {
        int  low=0, high=nums.size()-1;
        while(low<=high)
        {
            int mid=(low+high)>>1;

           
            if(nums[mid]==target) return mid;
            //first chek if mid id target or not if yes then return index
            //if leftarray is sorted
            if(nums[low]<=nums[mid])
            {
            if(nums[low]<=target && nums[mid]>=target)//if no is in beetween left half
            {
                high= mid -1;
            }else
            {
                 low = mid + 1; 
            }
                
            }
            else // if  right side is sorted
            {
                if(nums[mid]<=target && nums[high]>= target)
                {
                    low=mid+1;
                }else
                {
                    high=mid-1;
                }
                
            }
            
        }return -1;
    }
};
