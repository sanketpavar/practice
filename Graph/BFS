#include<iostream>
#include<vector>
#include<queue>
using namespace std;
class solution
{
    public:
    vector<int>bfsOfGraph(int V, vector<int> adj[])//function returning int vector and taking vertex and adj list as a parameter
    {
        vector<int> bfs;// bfs vector to rteurn bfs
        vector<int> vis(V,0);//to track the visited nodes
        queue<int> q;//use to create the bfs by taking adj
        
        q.push(0);//making first elemen
        vis[0]=1;
        
        
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            bfs.push_back(node);
            
            for(auto it:adj[node])
            {
                if(!vis[it])
                {
                    q.push(it);
                    vis[it]=1;
                }
            }
       
        }
        
        return bfs;
    }
    
};


//driver code
int main()
{
    int tc;//total components of graph ie for multiple graphs
    cin>>tc;
    
   while(tc--)
   {
       int V,E;
       cin>>V>>E;
       vector<int> adj[V];//creating array(aj[V] of vector
       for(int i=0;i<E;i++)
       {
           int u,v;
           cout<<"enter the u and v ";
           cin>>u>>v;
           adj[u].push_back(v);
           adj[v].push_back(u);//for undirected graph
       }
       solution obj;
       vector<int>ans=obj.bfsOfGraph(V,adj);
       for(int i=0;i<ans.size();i++)
       {
           cout<<ans[i]<<" ";
       }
       cout<<endl;
   }
   return 0;
   
}
