#include<iostream>
#include<queue>
#include<vector>
#include<cstring>
using namespace std;

class solution
{
    bool bipartiteDFS(int src, vector<int> adj[],int color[])
    {
        queue<int> q;
        q.push(src);
        color[src]=1;
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            for(auto it:adj[node])
            {
                if(it==-1)
                {
                    color[it]=1-color[node];
                    q.push(it);
                }else if(color[it]==color[node])
                {
                    return false;
                }
            }
        }return true;
    }
    
    public:
    bool checkBipartite(vector<int> adj[],int V)
    {
        int color[V];
        memset(color,-1,sizeof color);
        for(int i=0;i<V;i++)
        {
            if(color[i]==-1)
            {
                if(!bipartiteDFS(i,adj,color))
                {
                    return false;
                }
            }
            
        }return true;
    }
};

int main()
{
    int V,E;
    cin>>V>>E;
    
     int u,v;
    
    vector<int> adj[V];
    for(int i=0;i<E;i++)
    {
       
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    solution obj;
    if(obj.checkBipartite(adj,V))
    {
        cout<<"yes";
    }else
    {
        cout<<"no";
    }return 0;
}
